apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: { { .Values.mongo.name } }
  name: { { .Values.mongo.name } }
spec:
  serviceName: { { .Values.mongo.name } }
  replicas: { { .Values.mongo.replicas } }
  selector:
    matchLabels:
      app: { { .Values.mongo.name } }
  template:
    metadata:
      labels:
        app: { { .Values.mongo.name } }
    spec:
      containers:
        - env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
          image: mongo
          imagePullPolicy: ""
          name: { { .Values.mongo.name } }
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: mongo-claim0
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
        - name: mongo-claim0
          persistentVolumeClaim:
            claimName: mongo-claim0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: { { .Values.mongo.serviceName } }
  name: { { .Values.mongo.serviceName } }
spec:
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None
  selector:
    app: { { .Values.mongo.name } }
